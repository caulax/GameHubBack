// <auto-generated />
using System;
using GameHub;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameHub.Migrations
{
    [DbContext(typeof(GameHubContext))]
    [Migration("20181216193448_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameHub.Entities.Choice", b =>
                {
                    b.Property<Guid>("ChoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<Guid>("ChooserId");

                    b.Property<int>("Id");

                    b.HasKey("ChoiceId");

                    b.HasIndex("ChooserId");

                    b.ToTable("Choice");
                });

            modelBuilder.Entity("GameHub.Entities.Chooser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("SceneId");

                    b.HasKey("Id");

                    b.ToTable("Chooser");
                });

            modelBuilder.Entity("GameHub.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("PlayersCount");

                    b.Property<Guid>("StartSceneId");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameHub.Entities.ImageResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GameId");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("ImageResources");
                });

            modelBuilder.Entity("GameHub.Entities.MatrixVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChooserId");

                    b.Property<string>("MatrixPosition");

                    b.Property<Guid>("NextSceneId");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ChooserId");

                    b.ToTable("MatrixVariant");
                });

            modelBuilder.Entity("GameHub.Entities.Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BackgroundId");

                    b.Property<Guid>("ChooserId");

                    b.Property<Guid?>("ChooserId1");

                    b.Property<Guid>("GameId");

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.Property<bool>("WaitForOthers");

                    b.HasKey("Id");

                    b.HasIndex("ChooserId1");

                    b.HasIndex("GameId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("GameHub.Entities.Sprite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PositionX");

                    b.Property<int>("PositionY");

                    b.Property<Guid>("ResourceId");

                    b.Property<Guid>("SceneId");

                    b.HasKey("Id");

                    b.HasIndex("SceneId");

                    b.ToTable("Sprite");
                });

            modelBuilder.Entity("GameHub.Entities.Choice", b =>
                {
                    b.HasOne("GameHub.Entities.Chooser")
                        .WithMany("Choices")
                        .HasForeignKey("ChooserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameHub.Entities.ImageResource", b =>
                {
                    b.HasOne("GameHub.Entities.Game")
                        .WithMany("ImageResources")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameHub.Entities.MatrixVariant", b =>
                {
                    b.HasOne("GameHub.Entities.Chooser")
                        .WithMany("ChoiceMatrix")
                        .HasForeignKey("ChooserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameHub.Entities.Scene", b =>
                {
                    b.HasOne("GameHub.Entities.Chooser", "Chooser")
                        .WithMany()
                        .HasForeignKey("ChooserId1");

                    b.HasOne("GameHub.Entities.Game")
                        .WithMany("Scenes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameHub.Entities.Sprite", b =>
                {
                    b.HasOne("GameHub.Entities.Scene")
                        .WithMany("Sprites")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
